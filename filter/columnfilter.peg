package filter

type ColumnFilterParser Peg {
    Expr *Expression
}

filterExpression <- { p.Expr = &Expression{} }
                    andFilterExpression
                    (
                      ws
                      orOperator
                      ws
                      { p.Expr = p.Expr.PushLeftGoRight(OpOr) }
                      andFilterExpression
                      { p.Expr = p.Expr.GoUp() }
                    )*
                    !.

andFilterExpression <- columnFilterExpression
                       (
                         ws
                         andOperator
                         ws
                         { p.Expr = p.Expr.PushLeftGoRight(OpAnd) }
                         columnFilterExpression
                         { p.Expr = p.Expr.GoUp() }
                       )*

columnFilterExpression <- relation
relation <- ( { p.Expr = p.Expr.GoLeft() }
              expression
              { p.Expr = p.Expr.GoUp() }
              ws
              { p.Expr.SetType(TypeRelation) }
              relationOperator
              ws
              { p.Expr = p.Expr.GoRight() }
              expression
              { p.Expr = p.Expr.GoUp() }
            )

expression <- ( columnSpecifier / literal )

columnSpecifier <- '$' < [0-9]+ >
                   { p.Expr.SetColumn(buffer[begin:end]) }

literal <- stringLiteral

stringLiteral <- '"' < stringContent > '"'
                 { p.Expr.SetString(buffer[begin:end]) }
stringContent <- ( [^"] / '\\"' )+

relationOperator <- ( equals / notEquals )

equals <- '==' { p.Expr.Op = OpEquals }
notEquals <- ( '!=' / '<>' ) { p.Expr.Op = OpNotEquals }
andOperator <- ( 'and' / 'AND' / '&&' )
orOperator <- ( 'or' / 'OR' / '||' )
ws <- (' ' / '\t')
